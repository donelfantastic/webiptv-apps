document.addEventListener("DOMContentLoaded", () => {
//NAVIGATION MENU JS
let menuIcon = $(".toggle-nav");
let nav = $(".nav");
let navItem = $(".nav__item");

$("video").prop('muted', true);

  $(".bg-video-wrap").click( function (){
    if( $("video").prop('muted') ) {
          $("video").prop('muted', false);
    } else {
      $("video").prop('muted', true);
    }
  });

menuIcon.click(function () {
  $(this).toggleClass("toggle-nav--open");

  if (nav.hasClass("nav--open")) {
    navItem.removeClass("nav__item--open");

    setTimeout(function () {
      nav.removeClass("nav--open");
    }, 550);
  } else {
    nav.addClass("nav--open");

    setTimeout(function () {
      navItem.addClass("nav__item--open");
    }, 550);
  }
});

// Examples playlist
// https://iptv-org.github.io/iptv/index.country.m3u
// https://iptv-org.github.io/iptv/index.category.m3u
// https://iptv-org.github.io/iptv/countries/id.m3u
// https://iptv-org.github.io/iptv/categories/sports.m3u
// https://iptv-org.github.io/iptv/index.m3u

const categorySelect = document.getElementById("categorySelect");
const channelSelect = document.getElementById("channelSelect");
const channelLogo = document.getElementById("channelLogo");
const player = document.getElementById("player");
const m3uLinkInput = document.getElementById("m3uLink");
const loadButton = document.getElementById("loadButton");
const uploadFile = document.getElementById("uploadFile");
let channels = [];

function loadChannels(data) {
  const lines = data.split("\n");
  let currentChannel = {};
  let currentCategory = "";

  lines.forEach((line) => {
    if (line.startsWith("#EXTGRP:")) {
      currentCategory = line.split(":")[1];
    } else if (line.startsWith("#EXTINF:")) {
      const lastCommaIndex = line.lastIndexOf(",");
      currentChannel.name = line.slice(lastCommaIndex + 1);
      const groupTitleMatch = line.match(/group-title="([^"]*)"/);
      const logoMatch = line.match(/tvg-logo="([^"]*)"/);
      currentChannel.category = groupTitleMatch
        ? groupTitleMatch[1]
        : currentCategory || "Unknown";
      currentChannel.logo = logoMatch ? logoMatch[1] : "";
    } else if (line.startsWith("http")) {
      currentChannel.url = line;
      channels.push(currentChannel);
      currentChannel = {};
    }
  });

  const categories = [...new Set(channels.map((channel) => channel.category))];
  categories.forEach((category) => {
    const option = document.createElement("option");
    option.text = category;
    option.value = category;
    categorySelect.appendChild(option);
  });

  function populateChannelSelect(filteredChannels) {
    channelSelect.innerHTML = "";
    filteredChannels.forEach((channel) => {
      const option = document.createElement("option");
      option.text = channel.name;
      option.value = channel.url;
      channelSelect.appendChild(option);
    });
  }

  function playFirstChannelInCategory(category) {
    const filteredChannels = channels.filter(
      (channel) => channel.category === category
    );
    if (filteredChannels.length > 0) {
      playStream(filteredChannels[0].url, filteredChannels[0].logo);
    }
  }

  categorySelect.addEventListener("change", () => {
    const selectedCategory = categorySelect.value;
    populateChannelSelect([]);
    const filteredChannels = channels.filter(
      (channel) => channel.category === selectedCategory
    );
    populateChannelSelect(filteredChannels);
    playFirstChannelInCategory(selectedCategory);
  });

  populateChannelSelect([]);
  if (categories.length > 0) {
    const firstCategory = categories[0];
    const filteredChannels = channels.filter(
      (channel) => channel.category === firstCategory
    );
    populateChannelSelect(filteredChannels);
    playFirstChannelInCategory(firstCategory);
  }

  channelSelect.addEventListener("change", () => {
    const selectedChannelUrl = channelSelect.value;
    const selectedChannel = channels.find(
      (channel) => channel.url === selectedChannelUrl
    );
    playStream(selectedChannelUrl, selectedChannel.logo);
  });
}
function playStream(url, logo) { 
  if (logo) {
    channelLogo.style.display = "inline";
    channelLogo.src = logo;
  } else {
    channelLogo.style.display = "none";
  }

 loadButton.addEventListener("click", () => {
  const m3uUrl = m3uLinkInput.value;
  if (m3uUrl) {
    channels = [];
    categorySelect.innerHTML = "";
    channelSelect.innerHTML = "";
    fetch(m3uUrl)
      .then((response) => response.text())
      .then((data) => {
        loadChannels(data);
      })
      .catch((error) => {
        console.error("Erro:", error);
      });
  } else {
    console.log("Please enter an M3U link.");
  }
}); 
  
let hideMe = atob("aHR0cHM6Ly9jb3JzLXByb3h5LmNvb2tzLmZ5aQ==");
  
  function getSecureUrl(url, corsProxy = hideMe ) {
  try {
    const parsed = new URL(url);
    if (parsed.protocol === "https:") {
      return url;
    } else if (parsed.protocol === "http:") {
     
      const proxy = corsProxy.endsWith("/") ? corsProxy : corsProxy + "/";
      return proxy + url;
    }
    // If not http or https, return as is or handle as needed
    return url;
  } catch (e) {
    // Invalid URL
    return url;
  }
}

  const sURL = getSecureUrl(url);
  var flvPlayer = null;
  var tsPlayer = null;
  var hlsPlayer = null;
  var dashPlayer = null;

  var stopPlayers = function () {
    if (flvPlayer) {
      flvPlayer.destroy();
      flvPlayer = null;
    }

    if (tsPlayer) {
      tsPlayer.destroy();
      tsPlayer = null;
    }
    if (hlsPlayer) {
      hlsPlayer.destroy();
      hlsPlayer = null;
    }
    if (dashPlayer) {
      dashPlayer.destroy();
      dashPlayer = null;
    }
  }

  var hide_for_error = function () {
    $("#player").hide();
    stopPlayers();
  }

  var show_for_ok = function () {
    $("#player").show();
  }

  // Use H5 native to play mp4.
  if (url.indexOf(".mp4") > 0) {
    $("#player").attr("src", sURL).show;
    return;
  }

  // Start play HTTP-TS.
  if (url.indexOf(".ts") > 0) {
  if (!mpegts.getFeatureList().mseLivePlayback) {
    hide_for_error();
    return;
  }

  show_for_ok();

  tsPlayer = mpegts.createPlayer({
    type: "mpegts",
    url: sURL,
    isLive: true,
    enableStashBuffer: false
  });
  tsPlayer.attachMediaElement(document.getElementById("player"));
  tsPlayer.load();
  tsPlayer.play();
  return;
  }

  // Start play HLS.
  if (url.indexOf(".m3u8") > 0) {
    if (!Hls.isSupported()) {
      hide_for_error();
      return;
    }

    show_for_ok();

    hlsPlayer = new Hls();
    hlsPlayer.loadSource(sURL);
    hlsPlayer.attachMedia(document.getElementById("player"));
    return;
  }

  // Start play MPEG-DASH.
  if (url.indexOf(".mpd") > 0) {
    show_for_ok();

    dashPlayer = dashjs.MediaPlayer().create();
    dashPlayer.initialize(document.querySelector("#player"), sURL, true);
    return;
  }

  // Start play HTTP-FLV.
  let isFlv = url.indexOf(".flv") > 0;

  isFlv = isFlv || (url && url.indexOf("http") === 0);
  if (isFlv) {
    if (!mpegts.getFeatureList().mseLivePlayback) {
      hide_for_error();
      return;
    }

    show_for_ok();

    flvPlayer = mpegts.createPlayer({
      type: "flv",
      url: sURL,
      isLive: true,
      enableStashBuffer: false
    });

    flvPlayer.attachMediaElement(document.getElementById("player"));
    flvPlayer.load();
    flvPlayer.play();
    return;
  }
}
  uploadFile.addEventListener("change", (event) => {
  const file = event.target.files[0];
  if (file) {
    channels = [];
    categorySelect.innerHTML = "";
    channelSelect.innerHTML = "";
    const reader = new FileReader();
    reader.onload = function (e) {
      const fileContent = e.target.result;
      loadChannels(fileContent);
    };
    reader.readAsText(file);
  }
});

window.onload = () => {
  // const placeholderM3ULink = m3uLinkInput.placeholder;
  const placeholderM3ULink = "https://iptv-org.github.io/iptv/index.country.m3u";
  if (placeholderM3ULink) {
    channels = [];
    categorySelect.innerHTML = "";
    channelSelect.innerHTML = "";
    fetch(placeholderM3ULink)
      .then((response) => response.text())
      .then((data) => {
        loadChannels(data);
      })
      .catch((error) => {
        console.error("Error:", error);
      });
    }
  }
  
//SOCIAL PANEL JS
const floating_btn = document.querySelector(".floating-btn");
const close_btn = document.querySelector(".close-btn");
const social_panel_container = document.querySelector(
  ".social-panel-container"
);

floating_btn.addEventListener("click", () => {
  social_panel_container.classList.toggle("visible");
});

close_btn.addEventListener("click", () => {
  social_panel_container.classList.remove("visible");
 });
});
